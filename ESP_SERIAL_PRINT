void setup() {
  Serial.begin(9600);
  Serial.println("LET_START_PRINT");
   ota_senddata();
}

void loop() {
  Serial.println("LET_START_PRINT");
  delay(1000);
}

void ota_senddata()
{
  data_send1 = "";
  Serial.print("Sending Data to server\r\n");

  data_send1 = "http://updates.vtrack.in:80/cgi-bin/checkupdates.pl?unitid=" + String(getMacAddress()) + "&curver=" + String(check_ver) + "&model=kl90_wifi";

  Serial.print(data_send1);
  if (WiFi.status() == WL_CONNECTED) {
    payload1 = "";
    HTTPClient http;
    http.begin(data_send1);
    httpCode = http.GET();
    //             payload1 = http.getString();

    payload1 = "{\"URL\":\"http://updates.vtrack.in/KL09WIFI/KL09_WIFI_V_1.0.bin\",\"FS\":\"144736\"}";

    if (httpCode == 200) {
      Serial.print("ACK ");
      Serial.print(" = ");
      Serial.println(payload1);
      http.end();
      fota();
    }
    else {
      Serial.println("$NO_ACK$");
      http.end();
    }
  }
}
oid fota()
{

  //char *str1;

  char string[80];
  int d_codes = 0, j = 0, k = 0;
  for (int i = 0; i < sizeof(string); i++)
  {
    string[i] = 0;
  }
  payload1.toCharArray(string, sizeof(string));
  // Serial.println(string);

  for (int i = 0; i < sizeof(string); i++)
  {
    if (string[i] == '"')
    {
      d_codes++;
    }
    if (d_codes == 3)
    {
      if (string[i] != '"') {
        url[j] = string[i];
        j++;
      }
    }
    if (d_codes == 7)
    {
      if (string[i] != '"') {
        file_size[k] = string[i];
        k++;
      }
    }
  }
  j = k = d_codes = 0;


  for (int i = 0; i < sizeof(bin); i++)
  {
    bin[i] = 0;
  }

  for (int i = 0; i < strlen(url); i++)
  {
    if (url[i] == '"')break;
    if (url[i] == '/')d_codes++;
    if (d_codes == 4 && url[i] != '/') {
      bin[j] = url[i];
      j++;
    }
  }
  j = d_codes = 0;

  Serial.print("URL :");
  Serial.println(url);

  Serial.print("file_size :");
  Serial.println(file_size);

  Serial.println(bin);

  if (strstr(bin, val1))
  {
    Serial.println("version is same");
  }
  else
  {
    Serial.println("version is not same");

    for (int i = 0; i < sizeof(bin); i++)
    {
      if (bin[i] == '_')
      {
        d_codes++;
      }
      if (d_codes == 2)
      {
        ver[0] = bin[i + 2];
        ver[1] = bin[i + 3];
        ver[2] = bin[i + 4];
      }

    }

    d_codes = 0;
    Serial.println();
    Serial.print("ver :");
    Serial.print(ver);
    addr = 31;
    for (int i = 31; i < 34; i++)
    {
      EEPROM.write(addr, 0XFF);
      addr = addr + 1;
    }
    addr = 31;
    EEPROM.commit();
    for (int i = 31; i < 34; i++)
    {
      EEPROM.read(i);
    }
    for (int i = 0; i < strlen(ver); i++)
    {
      EEPROM.write(addr, ver[i]);
      addr = addr + 1;
    }
    addr = 31;
    check_ver = "";
    EEPROM.commit();

    //      Serial.println("ver :");/
    for (int i = 31; i < 34; i++)
    {
      //      Serial.print(char(EEPROM.read(i)));
      if (EEPROM.read(i) != 0xFF) {
        if (EEPROM.read(i) != 0x2C)check_ver += char(EEPROM.read(i));
      }
    }
    if ((WiFi.status() == WL_CONNECTED)) {

      t_httpUpdate_return ret = ESPhttpUpdate.update("http://updates.vtrack.in/KL09WIFI/hello-world.bin");

      switch (ret) {
        case HTTP_UPDATE_FAILED:
          Serial.printf("HTTP_UPDATE_FAILD Error (%d): %s", ESPhttpUpdate.getLastError(), ESPhttpUpdate.getLastErrorString().c_str());
          break;

        case HTTP_UPDATE_NO_UPDATES:
          Serial.println("HTTP_UPDATE_NO_UPDATES");
          break;

        case HTTP_UPDATE_OK:
          Serial.println("HTTP_UPDATE_OK");
          break;
      }
    }

  }
}
